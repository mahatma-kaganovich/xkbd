#!/usr/bin/perl
# generate xkbd config for "us,..." multi-layout
use charnames qw(:full :short :loose);

$minimal=@minimal@;

# 1 - reduce translated config size
# 0 - work with --enable-minimal (without keysymdef.h compiled-in)
$ks_bin=!$minimal;

sub key{
	my ($s,$n)=@_;
	my %s;
	$s=~s/<\/*key>//gs;
	for(split(/\n/,$s)){
		my ($x,$y)=$_=~/^\s*(\S+)\s+(.*?)\s*$/ or next;
		$s{$x}=$y;
	}
	if(exists($s{'default_ks'})){
		my $d=$s{'default_ks'};
		my $sh;
		my $cnt=exists($s{'default'});
		# now - in binary (must)
#		$s{'shift_mod_ks'}=$s{'mod_ks'} if(exists($s{'mod_ks'}) && !exists($s{'shift_mod_ks'}));
		for(@k){
			next if($_->[0] ne $d);
			$sh=$_->[1];
			next if(exists($s{'shift_ks'}) && $sh ne $s{'shift_ks'});
			$cnt++;
			my $i=($n<<1);
			for my $x ('default','shift'){
				my $y=$x.'_ks';
				if($i<=$#{$_} && (!exists($s{$y}) || $s{$y} ne $_->[$i]) && $_->[$i] ne 'NoSymbol' && $_->[$i] ne ''){
					$s{$y}=$_->[$i] if(!($x eq 'shift' && $_->[$i-1] eq $_->[$i]));
					$n && delete($s{$x});
				}
				$i++;
			}
			# now - in binary (must)
#			$i=($N<<1)+($n<<1);
#			$i+=2 if($N==1 && $k[0] eq $k[2] && $k[1] eq $k[3]);
#			for my $x ('mod','shift_mod'){
#				last if($i>$#{$_});
#				exists($s{$x})&&next;
#				my $y=$x.'_ks';
#				exists($s{$y})&&next;
#				$s{$y}=$_->[$i];
#				$i++;
#			}
			last;
		}
		$cnt || return '';
	}
	for my $x ('default','shift','mod','shift_mod'){
		exists($s{$x})&&next;
		my $y=$x.'_ks';
		exists($s{$y})||next;
		$y=$s{$y};
		if(exists($s{'default'})){
			if(exists($s{'default_ks'}) && $y eq $s{'default_ks'}){
#				$s{$x}=$s{'default'};
				next;
			}
		}
		$y0=$y;
		if ($y=~s/^KP_//) {
			$ly=lc($y);
			if (!exists($u{$y}) && exists($u{$ly})){
				$y=$ly
			} elsif ($y eq 'Decimal') {
				$y='decimalpoint';
			}
		}
		if(length($y)>1){
		    if(exists($u{$y})){
			$ks_bin && next;
			$y=$u{$y};
		    }else{
			my ($lc,$y1);
			if($y=~s/^U([0-9A-F]{4})$/chr(hex($1))/e){
			}elsif(($lc=lc($y) eq $y) && ($y1=charnames::vianame($y))){
				$y=chr($y1);
			}elsif(!($y=~s/^dead_//)){
				$y=~s/_//g;
			}elsif(exists($u{$y})){
				$y=$u{$y};
			}elsif($lc && ($y1=charnames::vianame("combining $y accent"))){
				$u{$y}=$y=chr($y1);
#			}elsif($lc && (($y1=charnames::vianame("$y accent")) || ($y1=charnames::vianame($y)))){
#				$u{$y}=$y=chr($y1);
			}elsif($ks_bin){
				next;
			}
		    }
		}elsif($ks_bin && $y0 eq $y){
			next;
		}
		$s{$x}=$y if($y=~/\S/);
	}
	# now in binary
#	$s{'bg'}=$p{'grey_col'} if(exists($s{'default'}) && length($s{'default'})>1);
#	if(!exists($s{'width'}) && !exists($s{'img'})){
#		$s{'width'}=7;
#		if(exists($s{'default_ks'}) && substr($s{'default_ks'},0,3) eq 'KP_'){
#			$s{'width'}=6;
#			$s{'bg'}=$p{'kp_col'};
#		}
#	}
	$s{'obey_capslock'}='yes' if(exists($s{'default'}) && exists($s{'shift'}) && uc($s{'default'}) eq uc($s{'shift'}));
	$s{'obey_capslock'}='yes' if(exists($s{'shift_ks'}) && uc($s{'default_ks'}) eq uc($s{'shift_ks'}));
	return join("\n",'	<key>',(map{"		$_ $s{$_}"}sort keys %s),'	</key>');
}

$i='config';
for(@ARGV){
	if($_=~s/^--//){
		undef $P{$i=$_};
	}else{
		push(@{$P{$i}},$_);
	}
}

for(@{$P{config}}?(@{$P{config}}):('/etc/xkbd-config.conf','@pkgdatadir@/xkbd-kp-f.conf')){
	open(F,'<',$_) && read(F,$k,-s F) && close(F) && last;
}
die $! if($k eq '');
utf8::decode($k);
$k=~s/#.*$//gm;
$k=~s/^\s+//gm;
$k=~s/\s+$//gm;

open F,'<','/usr/include/X11/keysymdef.h' or die $!;
while(defined($s=<F>)){
	my ($x,$y)=$s=~/^#define\s+XK_(\S+)\s+0x\S+\s*\/\*[ \(]U\+([0-9A-F]+)\s/gs or next;
	$y=chr(hex($y));
	$u{$x}=$y;
}
close(F);


open F,'-|','xmodmap -pke' or die $!;
while(defined($s=<F>)){
	$s=~s/ 8 asterisk U20BD NoSymbol/ 8 asterisk/gs; # â‚½ussian trash
	my ($x)=$s=~/^keycode +[0-9]+ += +(\S.*?)\s*$/;
	push @k,[split(/\s+/,$x)];
}
close(F);

for('grey_col','kp_col'){
	my($x)=$k=~/^\s*$_[ 	]+(\S*)/m;
	$p{$_}=defined($x)?$x:'0:0:0';
}

#for(@k){$N{$#{$_}>>1}++ if(length($_->[0])==1);}
#($N)=((sort{$N{$b}<=>$N{$a}}keys %n));
#$N++;

open F,'-|','setxkbmap -query' or die $!;
while(defined($s=<F>)){
	if(my ($l)=$s=~/layout:\s*(\S*)/){
		@layouts=split(/,/,$l);
		break;
	}
}
close(F);
@layouts||die "ERROR: no keyboard layouts from 'setxkbmap -query'";

$N=$#layouts+1;

($l)=$k=~/(<layout>.*<\/layout>)/gs;

$k=~s/[ 	]*(<key>.*?<\/key>)/key($1,0)/gse;
$k=~s/switch 0/switch 1/ if($N>1);
utf8::encode($k);
print $k;

for(2..$N){
	$l1=$l;
	$l1=~s/[ 	]*(<key>.*?<\/key>)/key($1,$_-1)/gse;
	$l1=~s/switch 0/switch $_/ if($_<$N);
	utf8::encode($l1);
	print "\n",$l1;
}
